<?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');/***for user*@author iscod*/class User_model extends CI_Model {		private $mcache_key_uid = 'USERINFO_CACHE_BY_UID';	private $mcache_key_username = 'USER_CACHE_BY_USERNAME';	private $mcache_key_email = 'USER_CACHE_BY_EMAIL';	private $mcache_key_pass = 'USER_CACHE_BY_PASS';	private $mcache_key_users_focus = 'USER_CACHE_BY_FOCUS';	private $mcache_key_users_followers = 'USER_CACHE_BY_FOLLOWERS';	private $mcache_key_for_users_followers = 'USER_CACHE_FOR_BY_FOLLOWERS';	private $mcache_key_users_bookfocus = 'USER_CACHE_BY_BOOKFOCUS';	/**	*@param string $username	*@return array $uid	*/	public function get_by_username($username, $cache = true) {		if ($cache) {			$uid = Mcache::read($this->mcache_key_username . $username);			if ($uid) return $uid;		}				$this->load->database();		$this->db->select('ID');		$users = $this->db->get_where('users', array('user_login' => $username));		if (!$users || $users->num_rows() < 1) {			return false;		}		$user = $users->row_array();		$uid = $user['ID'];		Mcache::write($this->mcache_key_username . $username, $uid);		return $uid;	}	/**	*@param string $email	*@return $uid	*/	public function get_by_email($email, $cache = true) {		if ($cache) {			$uid = Mcache::read($this->mcache_key_email . $email);			if ($uid) return $uid;		}		$this->load->database();		$this->db->select('ID');		$query = $this->db->get_where('users', array('user_email' => $email));		if (!$query) {			return false;		}		if ($query->num_rows() < 1) {			return null;		}		$user = $query->row_array();		$uid = $user['ID'];		Mcache::write($this->mcache_key_email . $email, $uid);				return $uid;	}	/**	*@param int $uid	*@param bool $cache=true	*@return array||bool $userinfo||false	*/	public function get_by_uid($uid, $cache = true) {				if (!$uid) {			return false;		}		if ($cache) {			$userinfo = Mcache::read($this->mcache_key_uid . $uid);			if ($userinfo && is_array($userinfo)) {				return $userinfo;			}		}		$user_config = dbclass::user($uid);		$db = $this->load->database($user_config['dsn'], true);		$db->select('user_login, user_nickname, user_email, phone, user_registered, user_status');		$query = $db->get_where($user_config['table'], array('ID' => $uid));		if (!$query) {			return false;		}		if ($query->num_rows() < 1) {			return null;		}		$users = $query->row_array();		$users['uid'] = $uid;		//查询用户userinfo		$users_config = dbclass::usersinfo($uid);		$db2 = $this->load->database($users_config['dsn'], true);		$usersinfo = $db2->get_where($users_config['table'], array('uid' => $uid));		$usersinfo = $usersinfo->row_array();		//合并两个数组		$userinfo = array_merge($users, $usersinfo);		Mcache::write($this->mcache_key_uid . $uid, $userinfo);		return $userinfo;	}	/**	*@param array $user_info	*@return bool true|false	*/	public function set_user_insert($userinfo) {		$is_user = $this->get_by_email($userinfo['user_email']);		if ($is_user) return false;		$this->load->database();		$is_insert = $this->db->insert('users', $userinfo);		if (!$is_insert) return false;		$uid = $this->db->insert_id();		return $uid;	}	/**	*The only place where to get the password	*@param int $uid	*@return string pass	*/	public function get_pass_by_uid($uid = '') {		if (!$uid) {			$uid = $this->uid;		}		if (Mcache::read($this->mcache_key_pass . $uid)) {			return Mcache::read($this->mcache_key_pass . $uid);		}		$user_config = dbclass::user($uid);		$db = $this->load->database($user_config['dsn'], true);		$db->select('user_pass');		$query = $db->get_where($user_config['table'], array('ID' => $uid));		$userinfo = $query->row_array();		if (!isset($userinfo['user_pass'])) return false;		Mcache::write($this->mcache_key_pass . $uid, $userinfo['user_pass']);		return $userinfo['user_pass'];	}	/**	*The is user follsers	*获取我关注了谁	*@param int $uid	*@return array uids	*/	public function get_by_uid_followers($uid, $is_cache = true){		if (!$uid) return false;		if ($is_cache && Mcache::read($this->mcache_key_users_followers . $uid) !== false) {			return Mcache::read($this->mcache_key_users_followers . $uid);		}		$user_config = dbclass::usersfollower($uid);		$db = $this->load->database($user_config['dsn'], true);		//我粉过的人		$db->select('follower_uid');		$query = $db->get_where($user_config['table'], array('uid' => $uid));		$users_follwer = $query->result_array();		$followers = array();		foreach ($users_follwer as $key => $value) {			$followers[] = $value['follower_uid'];		}		//获取互粉的用户		$db->select('uid');		$query = $db->get_where($user_config['table'], array('follower_uid' => $uid, 'type' => 2));		$f_followers = $query->result_array();		foreach ($f_followers as $key => $value) {			$followers[] = $value['uid'];		}		Mcache::write($this->mcache_key_users_followers . $uid, $followers);		return $followers;	}	/**	*this is for focus	*获取谁关注了我粉丝榜	*@param int $uid	*@return array	*/	public function get_by_uid_for_followers($uid , $is_cache = true){		if (!$uid) return false;		if ($is_cache && Mcache::read($this->mcache_key_for_users_followers . $uid) !== false) {			return Mcache::read($this->mcache_key_for_users_followers . $uid);		}		$user_config = dbclass::usersfollower($uid);		$db = $this->load->database($user_config['dsn'], true);		$query = $db->get_where($user_config['table'], array('follower_uid' => $uid));		$users_follwer = $query->result_array();		$followers = array();		foreach ($users_follwer as $key => $value) {			$followers[] = $value['follower_uid'];		}		//获取互粉的用户		$db->select('uid');		$query = $db->get_where($user_config['table'], array('uid' => $uid, 'type' => 2));		$f_followers = $query->result_array();		foreach ($f_followers as $key => $value) {			$followers[] = $value['uid'];		}		Mcache::write($this->mcache_key_for_users_followers . $uid, $followers);		return $followers;	}	/**	*两人是否互相关注	*@param int $uid	*@param int $f_uid	*@return int type 0,没有关系,1:uid关注f_uid,2互粉,3f_uid关注uid	*/	public function is_relationr($uid, $f_uid){		//用户1的关注		$followers = $this->get_by_uid_followers($uid);		//用户2的关注		$f_followers = $this->get_by_uid_followers($f_uid);		$type = 0;		//我关注了你		if (in_array($f_uid, $followers)) {			$type = 1;		}		//你关注了我		if (in_array($uid, $f_followers)) {			$type = 3;		}		//互粉		if (in_array($uid, $f_followers) && in_array($f_uid, $followers)) {			$type = 2;		}		return $type;	}	/**	*The is set follsers	*粉丝添加关注，插入数据时请保证数据的唯一	*@param $uid	*@param follower_id 追随关注的人的uid	*@return bool	*/	public function set_follower($uid, $follower_uid){		if (!$uid || !$follower_uid) return false;		//两人的关系		$type = $this->is_relationr($uid, $follower_uid);		if ($type == 1 || $type == 2) return true;		$user_config = dbclass::usersfollower($uid);		$db = $this->load->database($user_config['dsn'], true);		if (!$type) {			$db->insert($user_config['table'], array('uid' => $uid, 'follower_uid' => $follower_uid, 'type' => 1));		}		if ($type == 3) {			$query = $db->update($user_config['table'], array('type' => 2), array('uid' => $follower_uid, 'follower_uid' => $uid));			if (!$query) return false;		}		//更新我的关注和你的粉丝榜		Mcache::delete($this->mcache_key_users_followers . $uid);		Mcache::delete($this->mcache_key_for_users_followers . $follower_uid);		return true;	}	/**	*un follsers	*取消关注	*@param $uid	*@param $follower_id 取消关注的人	*@return bool	*/	public function un_follower($uid, $follower_uid){		if (!$uid || !$follower_uid) return false;		//两人的关系		$type = $this->is_relationr($uid, $follower_uid);		if (!$type || $type == 3) return true;		$user_config = dbclass::usersfollower($uid);		$db = $this->load->database($user_config['dsn'], true);		if ($type == 1) {			$del = $db->delete($user_config['table'], array('uid' => $uid, 'follower_uid' => $follower_uid));			if (!$del) return false;		}		if ($type == 2) {			//谁先发起的互动			$query = $db->get_where($user_config['table'], array('uid' => $uid, 'follower_uid' => $follower_uid));			if ($query->row_array()) {				$del = $db->delete($user_config['table'], array('uid' => $uid, 'follower_uid' => $follower_uid));				if (!$del) return false;				if ($uid != $follower_uid) {					$insert = $db->insert($user_config['table'], array('uid' => $follower_uid, 'follower_uid' => $uid, 'type' => 1));					if (!$insert) return false;				}			}else{				$update = $db->update($user_config['table'], array('type' => 1), array('uid' => $follower_uid, 'follower_uid' => $uid));				if (!$update) return false;			}		}		//更新我的关注和你的粉丝榜		Mcache::delete($this->mcache_key_users_followers . $uid);		Mcache::delete($this->mcache_key_for_users_followers . $follower_uid);		return true;	}	/**	*用户推荐的书	*@param int uid	*@return array	*/	public function get_by_uid_bookfocus($uid, $is_cache = true){		if (!$uid) return false;		if ($is_cache && Mcache::read($this->mcache_key_users_bookfocus . $uid) !== false) {			return Mcache::read($this->mcache_key_users_bookfocus . $uid);		}		$user_config = dbclass::bookfocus($uid);		$db = $this->load->database($user_config['dsn'], true);		$query = $db->get_where($user_config['table'], array('uid' => $uid));		$book = $query->result_array();		$books = array();				foreach ($book as $value) {			$books[] = $value['bookid'];		}		Mcache::write($this->mcache_key_users_bookfocus . $uid, $books);		return $books;	}	/**	*set focus book	*设置用户关注书	*@param int uid	*@param int bookid	*@return bool	*/	public function set_uid_bookfocus($uid, $bookid){		if (!$uid) return false;		$books = $this->get_by_uid->bookfocus($uid);		if (in_array($bookid, $books)) {			return true;		}		$user_config = dbclass::bookfocus($uid);		$db = $this->load->database($user_config['dsn'], true);		$query = $db->insert($user_config['table'], array('uid' => $uid, 'bookid' => $bookid));		if (!$query) return false;		Mcache::delete($this->mcache_key_users_bookfocus . $uid);		return true;	}	/**	*un focus books	*取消关注的书	*@param int uid	*@param int bookid	*@return bool	*/	public function un_uid_bookfocus($uid, $bookid){		if (!$uid) return false;		$books = $this->get_by_uid->bookfocus($uid);		if (!in_array($bookid, $books)) {			return true;		}		$user_config = dbclass::bookfocus($uid);		$db = $this->load->database($user_config['dsn'], true);		$query = $db->delete($user_config['table'], array('uid' => $uid, 'bookid' => $bookid));		if (!$query) return false;		Mcache::delete($this->mcache_key_users_bookfocus . $uid);		return true;	}}